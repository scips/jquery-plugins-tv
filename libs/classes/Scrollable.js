// Generated by CoffeeScript 1.3.3
(function() {
  var $, scrollablePlugin;

  $ = Jquery;

  scrollablePlugin = (function() {

    function scrollablePlugin(element, options) {
      var defaultSettings, opts;
      defaultSettings = {
        next: '.next',
        prev: '.prev',
        scrollable: '.scrollable',
        scrollstep: 200,
        debug: false,
        disabled: 'disabled',
        highlighted: 'highlighted'
      };
      opts = $.extend(defaultSettings, options || {});
      this.elem = $(element);
      this.nextButton = this.elem.find(opts.next);
      this.previousButton = this.elem.find(opts.previous);
      this.scrollableZone = this.elem.find(opts.scrollable);
      this.htmlcontent = this.scrollableZone.html();
      this.scrollstep = opts.scrollstep;
      this.topBase = 0;
      this.heightBase = 0;
      this.Boundary1 = 0;
      this.Boundary2 = 0;
      this.heightScrollableZone = 0;
      this.scrollableZone.empty().prepend("<div></div>");
      this.scrollDiv = this.scrollableZone.find("div");
      this.scrollDiv.html(htmlContent).css("position", "absolute");
      this.scrollableZone.css("overflow", "hidden").css("position", "relative").css("display", "block").css("zoom", "1");
      this.previousButton.addClass(opts.disabled);
      this.topBase = parseInt(this.scrollDiv.css('top'));
      this.Boundary1 = this.topBase;
      this.heightBase = parseInt(this.scrollDiv.css('height'));
      this.heightScrollableZone = parseInt(this.scrollableZone.css('height'));
      this.Boundary2 = this.topBase - this.heightBase + this.heightScrollableZone;
    }

    scrollablePlugin.scrollDown = function() {
      var callback, step, top;
      top = parseInt(this.scrollDiv.css('top'));
      if (this.opts.debug) {
        console.log("next-before top: " + top + " boundary 1: " + Boundary1 + " boundary 2: " + Boundary2);
      }
      step = this.scrollstep;
      if (top > this.Boundary2) {
        if (top - this.scrollstep <= this.Boundary2) {
          step = -(this.Boundary2 - top);
          this.nextButton.addClass(opts.disabled);
        }
        this.nextButton.addClass(opts.highlighted);
        callback = function() {
          this.previousButton.removeClass(opts.disabled);
          this.nextButton.removeClass(opts.highlighted);
          top = parseInt(this.scrollDiv.css('top'));
          if (this.opts.debug) {
            return console.log("next-before top: " + top + " boundary 1: " + Boundary1 + " boundary 2: " + Boundary2);
          }
        };
        return this.scrollDiv.stop().animate({
          top: "-=" + step
        }, {
          complete: callback
        });
      }
    };

    scrollablePlugin.scrollUp = function() {
      var callback, step, top;
      top = parseInt(this.scrollDiv.css('top'));
      if (this.opts.debug) {
        console.log("next-before top: " + top + " boundary 1: " + Boundary1 + " boundary 2: " + Boundary2);
      }
      step = this.scrollstep;
      if (top < this.Boundary1) {
        if (top + this.scrollStep >= this.Boundary1) {
          step = -(top - this.Boundary1);
          this.previousButton.addClass(opts.disabled);
        }
        this.previousButton.addClass(opts.highlighted);
        callback = function() {
          this.nextButton.removeClass(opts.disabled);
          this.previousButton.removeClass(opts.highlighted);
          top = parseInt(this.scrollDiv.css('top'));
          if (this.opts.debug) {
            return console.log("next-before top: " + top + " boundary 1: " + Boundary1 + " boundary 2: " + Boundary2);
          }
        };
        return this.scrollDiv.stop().animate({
          top: "+=" + step
        }, {
          complete: callback
        });
      }
    };

    return scrollablePlugin;

  })();

}).call(this);
